---
- name: Check if required variables are defined
  fail: msg="Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items: 
    - config_path 
    - provider
  run_once: true

- name: Validate
  napalm_install_config:
    provider: "{{ provider }}"
    config_file: "{{ config_path }}"
    commit_changes: false    #true = apply change
    replace_config: "{{ isReplace }}"    #true = config replace false = merge/add to current config
    get_diffs: true
  register: diff                       #Ansible function for collecting output
  failed_when: diff.changed == true
#  ignore_errors: yes
#- copy:
 #   content: "Hostname, Status"
  #  dest: "./test.csv"

#- name: Output pass/fail configs
 # lineinfile:
  #   line: "{{ ansible_host }}, {{ diff.changed }}"
  #   insertafter: EOF
  #   dest: "./test.csv"
  #delegate_to: 127.0.0.1
  #https://groups.google.com/forum/#!topic/ansible-project/rBcWzXjt-Xc

#Sorry for the delay on getting back to you. Essentially, my custom ansible module uses fcntl.flock(). This has the effect that the lock will automatically be given up when the process exits. Here is some sample code:

#def main():
    # Normal ansible module initialization

 #   lock_file = open(LOCK_FILE_PATH, 'w')
  #  fcntl.flock(lock_file.fileno(), fcntl.LOCK_EX)
    # Put code that needs to be run serially per system here
    # Lock will be released when lock_file is closed (or goes out of scope)