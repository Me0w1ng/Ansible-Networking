---
#takes in a zip file
#unzips it
#config path is unzippedfolder/{ hostname }.txt
#includ napalm_config
- name: Check if required variables are defined
  fail: msg="Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items: 
    - backup_path 
    - ios_provider
    - archive_dir
    - isArchive
#####################################################
- name: Folder name suffix
  set_fact:
    suffix: "{{ '_Replace' if isReplace else '_Merge' }}"

- name: Get Date@Time and set in a variable
  shell: 'date +%Y-%m-%d@%H%M%S'
  register: timestamp_temp
  run_once: true
- set_fact: 
    timestamp: "{{ timestamp_temp.stdout }}"
    output_dir: "{{ archive_dir }}/{{ timestamp_temp.stdout }}{{ suffix }}"
  run_once: true

- name: Create config output directory 
  file: path="{{ output_dir }}" state=directory
  run_once: true
  
- name: Config Note
  copy: content="{{ note }}" dest="{{ output_dir }}/{{ timestamp }}_Note.txt"
  run_once: true
  when: note is defined

- name: Merge Config
  napalm_install_config:
    provider: "{{ ios_provider }}"
    config_file: "{{ config_path }}"
    commit_changes: "{{ isCommit }}"     #true = apply change
    replace_config: "{{ isReplace }}"    #true = config replace false = merge/add to current config
    get_diffs: true
    diff_file: "{{ output_dir }}/Diff_{{ inventory_hostname }}.txt"
    archive_file: "{{ output_dir }}/Config_{{ inventory_hostname }}.txt"

- name: zip config
  archive:
    path: "{{ output_dir }}"
    dest: "{{ output_dir }}.zip"
    format: zip
  run_once: true
  when: isArchive 

- name: Delete config folder
  file:
    state: absent
    path: "{{ output_dir }}"
  run_once: true
  when: isArchive 